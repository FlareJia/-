题目描述
给定一个句子（只包含字母和空格）， 将句子中的单词位置反转，单词用空格分割, 单词之间只有一个空格，前后没有空格。 比如： （1） “hello xiao mi”-> “mi xiao hello”
输入描述:
输入数据有多组，每组占一行，包含一个句子(句子长度小于1000个字符)
输出描述:
对于每个测试示例，要求输出句子中单词反转后形成的句子
示例1
输入
hello xiao mi
输出
mi xiao hello

python版本：
import sys
s=input().split()#获取输入并分隔，保存为一个list
length=len(s)-1#获取list的大小，并-1获得初始index
res=[]#初始化一个结果list
while(length!=-1):#因为要获取最后一个index为0，所以判断停止循环为！=-1
    res.append(s[length][:])#将获倒置的值添加入res
    length-=1#每次都将length-1来完成遍历
print(" ".join(res))#将list转换为str


c++版本（别人用栈）：
#include<iostream>
#include<stack>
#include<string>
using namespace std;
int main(){
    string s;
    stack<string> sstack;
    while(cin>>s){
        sstack.push(s);
    }
    while(sstack.size()!=1){
        cout<<sstack.top()<<" ";
        sstack.pop();
    }
    cout<<sstack.top()<<endl;
    return 0;
}

c++版本（自己 通过50% 输出格式有问题）：
#include<iostream>
#include<vector>
using namespace std;
int main()
{
    string s;
    getline(cin,s);
    int len=s.length()-1;
    //cout << s;
    int pos=len;
    for(int i=len;i>0;i--)
    {
        if (s[i]==' ')
        {
            //cout << "i,pos：" << i << pos;
            cout << s.substr(i+1,pos-i) << ' ';
            pos=i;
        }
    }
    cout << s.substr(0,pos) <<endl;
    return 0;
}
