题目描述
现在有一棵合法的二叉树，树的节点都是用数字表示，现在给定这棵树上所有的父子关系，求这棵树的高度
输入描述:
输入的第一行表示节点的个数n（1 ≤ n ≤ 1000，节点的编号为0到n-1）组成，
下面是n-1行，每行有两个整数，第一个数表示父节点的编号，第二个数表示子节点的编号
输出描述:
输出树的高度，为一个整数

示例1
输入
5
0 1
0 2
1 3
1 4
输出
3

C++版本：
#include<iostream>
#include<vector>
using namespace std;
int main()
{
    int n,H=1;//n为输入的节点个数，H为最后返回的高度
    int i=0;
    int f,c,h;//f为父节点，c为子节点，h为当前高度
    vector<int> nodes(1000,0);//有效节点高度，共有1000个元素，每个元素都初始化高度为0
    nodes[0]=1;
    vector<int> childnum(1000,0);//记录节点的孩子个数
    cin >> n;
    while(--n)
    {
        cin >> f >> c;//获取输入父亲节点f和孩子节点c
        if(nodes[f]==0 || childnum[f]==2)//父节点不存在 或者 父节点已有两个孩子 就跳过
            continue;
        childnum[f]+=1;//否则，就给父节点的孩子个数加1
        h=nodes[f]+1;//当前高度为父节点高度加1
        nodes[c]=h;//给孩子节点的高度置为当前高度
        if(h>H)//记录最大高度
            H=h;
    }
    cout << H;
    return 0;
}

python版本：
import sys
n=int(input())#获取节点个数
tree={'0':[1,0]}#[层数，字节点个数] 相当于初始化了一个null节点
for i in range(n-1):#遍历获取每一行
    father ,son = sys.stdin.readline().split()#获取父节点，子节点
    if father in tree and tree[father][1]<2:#若父节点在树中，且此父节点的孩子结点小于2(用于过滤是否为合法二叉树)
        tree[father][1]+=1#首先给父节点的孩子个数加一
        tree[son]=[tree[father][0]+1,0]#将孩子加入树中,（层数比父节点的层数多1层）故层数先加1，然后置孩子个数为0
#print(tree)
print(max(i[0] for i in tree.values()))#返回最高层数即可
